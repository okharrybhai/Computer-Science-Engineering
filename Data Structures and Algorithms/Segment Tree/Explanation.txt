
Range Sum Query:

Let's consider the problem to understand concept of segment tree.

You have given an array of length n and you've given q queries to
1. Find the sum of elements from index l to r where 0 <= l <= r < n.
2. Update the ith value of array to new value x, a[i] = x

First Method: we can calculate sum for every range l to r, that will take O(n) time and for updating the value that will take O(1).
Second Method: prefixsum, we can calculate sum for every range l to r, that will take O(1) time using prefix[r] - prefic[l-1] and for updating the value that will take O(n) as we've to maintain the prefix sum array.
Third Method: The most efficient method is to use a segment tree, we can use a Segment Tree to do both operations in O(log(N)) time.

#Build Segment Tree: Time Complexity O(N)

Using Divide & Conquer Technique, start from the root and recurse on the left and the right child until a leaf node is reached. From the leaves, go back to the root and update all the nodes in the path (like seg_tree[node]=seg_tree[2*node+1]+seg_tree[2*node+2].). Here 'node' represents the current node is being processed, 2*node+1 is left node and 2*node+2 is the right node of the current node. 

for example:
Arr[N] = {2,6,4,5,1}

                18[0,4]
                 /   \
                /     \
               /       \
             8[0,1]    10[2,4]
             /  \         / \
            /    \       /   \
           /      \     /     \
       2[0,0]  6[1,1]  9[2,3]  1[4,4]
                       /  \
                      /    \
                   4[2,2]  5[3,3]


#Query in a given range: Time Complexity O(logN)

To query on a given range, check 3 conditions.

a) Range represented by a node is completely inside the given range
b) Range represented by a node is completely outside the given range
c) Range represented by a node is partially inside and partially outside the given range

------------------------------------------------------------------------------------------------------------------

Range Minimum Query:

for example:
Arr[N] = {2,6,4,5,1}

                1[0,4]
                 /   \
                /     \
               /       \
             2[0,1]    1[2,4]
             /  \         / \
            /    \       /   \
           /      \     /     \
       2[0,0]  6[1,1]  4[2,3]  1[4,4]
                       /  \
                      /    \
                   4[2,2]  5[3,3]
