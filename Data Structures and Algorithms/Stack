Stack

A real-world stack allows operations at one end only. For example, we can place or remove a card or plate from the top of the stack only. Likewise, Stack ADT allows 
all data operations at one end only. At any given time, we can only access the top element of a stack.

This feature makes it LIFO data structure. LIFO stands for Last-in-first-out. Here, the element which is placed (inserted or added) last, is accessed first. In stack 
terminology, insertion operation is called PUSH operation and removal operation is called POP operation.

Basic Operations

push() − Pushing (storing) an element on the stack.
pop() − Removing (accessing) an element from the stack.

When data is Pushed onto stack.
To use a stack efficiently, we need to check the status of stack as well. For the same purpose, the following functionality is added to stacks −
peek() − get the top data element of the stack, without removing it.
isFull() − check if stack is full.
isEmpty() − check if stack is empty.

Code for stack-

#include<stdio.h>
#include<stdlib.h>
struct stack
{
int size;
int top;
int *S;
};
void create(struct stack *st)
{
    printf("Enter size ");
    scanf("%d",&st->size);
    st->top=-1;
    st->S=(int *) malloc(st->size*sizeof(int));


}
void display(struct stack st)
{
    int i;
    for(i=st.top;i>=0;i--)
    {
        printf("%d\n",st.S[i]);
    }
    printf("\n");
}
void push(struct stack *st,int x)
{
    if(st->top==st->size-1)
    {
        printf("Stack overflow\n");
    }
    else
    {
        st->top++;
        st->S[st->top]=x;
    }

}
int pop(struct stack *st)
{
    int x=-1;
    if(st->top==-1)
        printf("Stack underflow\n");
    else
    {
        x=st->S[st->top];
        st->top--;
    }
    return x;

}
int peek(struct stack st,int index)
{
   int x=-1;
   if(st.top-index+1<0)
        printf("Invalid index\n");
   x=st.S[st.top-index+1];
   return x;


}
int isEmpty(struct stack st)
{
    if(st.top==-1)
        return 1;
    return 0;
}
int isFull(struct stack st)
{
    return st.top==st.size-1;
}
int stackTop(struct stack st)
{
    if(!isEmpty(st))
        return st.S[st.top];
    return -1;

}
int main()
{
    struct stack st;
    create(&st);
    push(&st,10);
    push(&st,20);
    push(&st,30);
    push(&st,40);
    push(&st,50);
    printf("deleted element=%d\n",pop(&st));
    printf("peek element=%d\n",peek(st,2));
    printf("stacktop=%d\n",stackTop(st));


    display(st);

}
